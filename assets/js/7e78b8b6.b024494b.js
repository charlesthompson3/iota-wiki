"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[20387],{14408:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),a=["components"],s={image:"/img/integration-services/logo/integration_services.png",description:"When you execute docker-compose it will run a database, setup job and service on the current host. The ports `3000` and `27017` will be exposed on the current host.",keywords:["expose API","exposed ports","configure","mongodb port","integration services apis"]},c="Expose APIs",p={unversionedId:"getting_started/installation/docker_compose/expose_apis",id:"getting_started/installation/docker_compose/expose_apis",title:"Expose APIs",description:"When you execute docker-compose it will run a database, setup job and service on the current host. The ports `3000` and `27017` will be exposed on the current host.",source:"@site/content/build/integration-services/production/documentation/docs/getting_started/installation/docker_compose/expose_apis.md",sourceDirName:"getting_started/installation/docker_compose",slug:"/getting_started/installation/docker_compose/expose_apis",permalink:"/integration-services/getting_started/installation/docker_compose/expose_apis",draft:!1,editUrl:"https://github.com/iotaledger/integration-services/edit/develop/documentation/content/build/integration-services/production/documentation/docs/getting_started/installation/docker_compose/expose_apis.md",tags:[],version:"current",frontMatter:{image:"/img/integration-services/logo/integration_services.png",description:"When you execute docker-compose it will run a database, setup job and service on the current host. The ports `3000` and `27017` will be exposed on the current host.",keywords:["expose API","exposed ports","configure","mongodb port","integration services apis"]},sidebar:"docs",previous:{title:"Local Setup",permalink:"/integration-services/getting_started/installation/docker_compose/"},next:{title:"Concept",permalink:"/integration-services/basics/authentication/concept"}},l={},u=[],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"expose-apis"},"Expose APIs"),(0,i.kt)("p",null,"When you execute docker-compose it will run a database, setup job and service on the current host."),(0,i.kt)("p",null,"The ports ",(0,i.kt)("inlineCode",{parentName:"p"},"3000")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"27017")," will be exposed on the current host:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"27017")," is the MongoDB port: You can use it to access to the database for development purpose using the username,\npassword, and database you configured in your ",(0,i.kt)("inlineCode",{parentName:"li"},".env")," file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"3000")," is the port that will serve the Integration Service APIs.")),(0,i.kt)("p",null,"You can check if Integration Services API is up and running by running the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl http://localhost:3000/info\n")),(0,i.kt)("p",null,"You can open in the OpenAPI documentation for the API at this address using your browser of choice:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000/docs"},"http://localhost:3000/docs")))}m.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(g,a(a({ref:t},l),{},{components:n})):o.createElement(g,a({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);