"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[95388],{52469:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var i=n(83117),a=n(80102),o=(n(67294),n(3905)),d=n(46624),r=["components"],l={title:"Update DID Documents",sidebar_label:"Update",description:"How DID Documents can be manipulated and how updates should be published",image:"/img/Identity_icon.png",keywords:["Documents","DID","Tangle","Update","Publish"]},s=void 0,c={unversionedId:"decentralized_identifiers/update",id:"decentralized_identifiers/update",title:"Update DID Documents",description:"How DID Documents can be manipulated and how updates should be published",source:"@site/external/identity.rs/documentation/docs/decentralized_identifiers/update.mdx",sourceDirName:"decentralized_identifiers",slug:"/decentralized_identifiers/update",permalink:"/identity.rs/decentralized_identifiers/update",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/decentralized_identifiers/update.mdx",tags:[],version:"current",frontMatter:{title:"Update DID Documents",sidebar_label:"Update",description:"How DID Documents can be manipulated and how updates should be published",image:"/img/Identity_icon.png",keywords:["Documents","DID","Tangle","Update","Publish"]},sidebar:"docs",previous:{title:"Create and Publish",permalink:"/identity.rs/decentralized_identifiers/create"},next:{title:"Resolve",permalink:"/identity.rs/decentralized_identifiers/resolve"}},u={},p=[{value:"Example",id:"example",level:2},{value:"Account Module (Recommended)",id:"account-module-recommended",level:3}],m={toc:p};function h(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"TODO: Explain how DID Documents can be manipulated and how updates should be published."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"This example shows how you can add more to an existing DID Document. The two main things you can add are Verification Methods and Services. A verification method adds public keys, which can be used to digitally sign things like an identity. The services provide metadata around the identity via URIs. These can be URLs, but also emails or IOTA indices."),(0,o.kt)("h3",{id:"account-module-recommended"},"Account Module (Recommended)"),(0,o.kt)(d.Z,{nodeReplitLink:"https://repl.it/@IOTAFoundation/manipulate-did?lite=true",rustContent:'// Copyright 2020-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example account_manipulate\n\nuse std::path::PathBuf;\n\nuse identity::account::Account;\nuse identity::account::IdentitySetup;\nuse identity::account::MethodContent;\nuse identity::account::Result;\nuse identity::account_storage::Stronghold;\nuse identity::core::Url;\nuse identity::did::MethodRelationship;\nuse identity::iota::ExplorerUrl;\nuse identity::iota_core::IotaDID;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  pretty_env_logger::init();\n\n  // ===========================================================================\n  // Create Identity - Similar to create_did example\n  // ===========================================================================\n\n  // Stronghold settings\n  let stronghold_path: PathBuf = "./example-strong.hodl".into();\n  let password: String = "my-password".to_owned();\n  let stronghold: Stronghold = Stronghold::new(&stronghold_path, password, None).await?;\n\n  // Create a new Account with the default configuration\n  let mut account: Account = Account::builder()\n    .storage(stronghold)\n    .create_identity(IdentitySetup::default())\n    .await?;\n\n  // ===========================================================================\n  // Identity Manipulation\n  // ===========================================================================\n\n  // Add another Ed25519 verification method to the identity\n  account\n    .update_identity()\n    .create_method()\n    .content(MethodContent::GenerateEd25519)\n    .fragment("my-next-key")\n    .apply()\n    .await?;\n\n  // Associate the newly created method with additional verification relationships\n  account\n    .update_identity()\n    .attach_method_relationship()\n    .fragment("my-next-key")\n    .relationships(vec![\n      MethodRelationship::CapabilityDelegation,\n      MethodRelationship::CapabilityInvocation,\n    ])\n    .apply()\n    .await?;\n\n  // Add a new service to the identity.\n  account\n    .update_identity()\n    .create_service()\n    .fragment("my-service-1")\n    .type_("MyCustomService")\n    .endpoint(Url::parse("https://example.com")?)\n    .apply()\n    .await?;\n\n  // Remove the Ed25519 verification method\n  account\n    .update_identity()\n    .delete_method()\n    .fragment("my-next-key")\n    .apply()\n    .await?;\n\n  // Retrieve the DID from the newly created identity.\n  let iota_did: &IotaDID = account.did();\n\n  // Prints the Identity Resolver Explorer URL.\n  // The entire history can be observed on this page by clicking "Loading History".\n  let explorer: &ExplorerUrl = ExplorerUrl::mainnet();\n  println!(\n    "[Example] Explore the DID Document = {}",\n    explorer.resolver_url(iota_did)?\n  );\n\n  Ok(())\n}\n',nodeGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/bindings/wasm/examples-account/src/manipulate_did.ts",rustGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/examples/account/manipulate_did.rs",mdxType:"CodeSnippet"}))}h.isMDXComponent=!0},46624:function(e,t,n){n.d(t,{Z:function(){return d}});var i=n(86010),a=n(67294),o=n(55990);function d(e){var t=e.nodeReplitLink,n=e.rustContent,d=e.nodeGithubLink,r=e.rustGithubLink,l=a.useState("node"),s=l[0],c=l[1],u=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",fill:"currentColor",class:"bi bi-box-arrow-up-right",viewBox:"0 0 16 16"},a.createElement("path",{"fill-rule":"evenodd",d:"M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"}),a.createElement("path",{"fill-rule":"evenodd",d:"M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"}));return(0,a.useEffect)((function(){var e=localStorage.getItem("lang"),i=e||"node";"node"!==i||t||(i="rust"),"rust"!==i||n||(i="node"),c(i)})),a.createElement("div",null,a.createElement("div",{className:(0,i.Z)("langSelector")},t&&a.createElement("button",{className:(0,i.Z)("button","languageButton","mr-sm",{activeButton:"node"===s,inactiveButton:"node"!==s}),onClick:function(){localStorage.setItem("lang","node"),c("node")}},"Node.js"),n&&a.createElement("button",{className:(0,i.Z)("button","languageButton",{activeButton:"rust"==s,inactiveButton:"rust"!==s}),onClick:function(){localStorage.setItem("lang","rust"),c("rust")}},"Rust")),a.createElement("div",{className:(0,i.Z)("codeSnippetContainer")},"node"===s?a.createElement(a.Fragment,null,a.createElement("iframe",{frameborder:"0",width:"100%",height:"700px",src:t})):a.createElement("div",{className:(0,i.Z)("rustContainer")},a.createElement(o.Z,{className:(0,i.Z)("noMarginBottom"),language:"rust"},n))),a.createElement("div",{className:(0,i.Z)("githubLink")},d&&"node"===s&&a.createElement("a",{href:d,target:"_blank"},"GitHub\xa0",u),r&&"rust"===s&&a.createElement("a",{href:r,target:"_blank"},"GitHub\xa0",u)))}}}]);