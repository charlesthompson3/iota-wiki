"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[57184],{82771:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return m}});var i=n(83117),r=n(80102),o=(n(67294),n(3905)),a=n(46624),s=["components"],d={title:"Resolve an IOTA Identity",sidebar_label:"Resolve",description:"Explain how resolving works including arguments",image:"/img/Identity_icon.png",keywords:["Resolve"]},l=void 0,u={unversionedId:"decentralized_identifiers/resolve",id:"decentralized_identifiers/resolve",title:"Resolve an IOTA Identity",description:"Explain how resolving works including arguments",source:"@site/external/identity.rs/documentation/docs/decentralized_identifiers/resolve.mdx",sourceDirName:"decentralized_identifiers",slug:"/decentralized_identifiers/resolve",permalink:"/identity.rs/decentralized_identifiers/resolve",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/decentralized_identifiers/resolve.mdx",tags:[],version:"current",frontMatter:{title:"Resolve an IOTA Identity",sidebar_label:"Resolve",description:"Explain how resolving works including arguments",image:"/img/Identity_icon.png",keywords:["Resolve"]},sidebar:"docs",previous:{title:"Update",permalink:"/identity.rs/decentralized_identifiers/update"},next:{title:"Resolve a DID history",permalink:"/identity.rs/decentralized_identifiers/resolve_history"}},c={},m=[{value:"Example",id:"example",level:2}],p={toc:m};function g(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"TODO: Explain how resolving works including arguments."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"A short example that shows how you can resolve a DID Document. This example returns the latest DID Document."),(0,o.kt)(a.Z,{nodeReplitLink:"https://repl.it/@IOTAFoundation/resolution?lite=true",rustContent:'// Copyright 2020-2021 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! A basic example that generates a DID Document, publishes it to the Tangle,\n//! and retrieves information through DID Document resolution/dereferencing.\n//!\n//! See also https://www.w3.org/TR/did-core/#did-resolution and https://www.w3.org/TR/did-core/#did-url-dereferencing\n//!\n//! cargo run --example resolution\n\nuse identity::did::resolution;\nuse identity::did::resolution::Dereference;\nuse identity::did::resolution::InputMetadata;\nuse identity::did::resolution::Resolution;\nuse identity::did::resolution::Resource;\nuse identity::did::resolution::SecondaryResource;\nuse identity::did::CoreDID;\nuse identity::did::DID;\nuse identity::iota::Receipt;\nuse identity::iota_core::IotaDID;\nuse identity::iota_core::IotaDIDUrl;\nuse identity::prelude::*;\n\nmod create_did;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  // Create a client instance to send messages to the Tangle.\n  let client: Client = Client::new().await?;\n\n  // Create a signed DID Document and KeyPair (see create_did.rs).\n  let (document, _, _): (IotaDocument, KeyPair, Receipt) = create_did::run().await?;\n\n  // ===========================================================================\n  // DID Resolution\n  // ===========================================================================\n\n  let doc_did: &IotaDID = document.id();\n  let did_url: &str = doc_did.as_str();\n\n  // Retrieve the published DID Document from the Tangle.\n  let input: InputMetadata = Default::default();\n  let output: Resolution = resolution::resolve(did_url, input, &client).await?;\n\n  println!("Resolution > {:#?}", output);\n\n  // The resolved Document should be the same as what we published.\n  assert_eq!(\n    output.document.unwrap(),\n    document\n      .core_document()\n      .clone()\n      .map(CoreDID::from, |properties| properties)\n  );\n\n  // ===========================================================================\n  // DID Dereferencing\n  // ===========================================================================\n\n  let resource_url: IotaDIDUrl = doc_did.to_url().join("#sign-0")?;\n\n  // Retrieve a subset of the published DID Document properties.\n  let input: InputMetadata = Default::default();\n  let output: Dereference = resolution::dereference(resource_url.to_string(), input, &client).await?;\n\n  println!("Dereference > {:#?}", output);\n\n  // The resolved resource should be the DID Document\'s default signing method.\n  match output.content.unwrap() {\n    Resource::Secondary(SecondaryResource::VerificationKey(method)) => {\n      assert_eq!(method, document.default_signing_method()?.clone().map(CoreDID::from));\n    }\n    resource => {\n      panic!("Invalid Resource Dereference > {:#?}", resource);\n    }\n  }\n\n  Ok(())\n}\n',nodeGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/bindings/wasm/examples/src/resolution.js",rustGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/examples/low-level-api/resolution.rs",mdxType:"CodeSnippet"}))}g.isMDXComponent=!0},46624:function(e,t,n){n.d(t,{Z:function(){return a}});var i=n(86010),r=n(67294),o=n(55990);function a(e){var t=e.nodeReplitLink,n=e.rustContent,a=e.nodeGithubLink,s=e.rustGithubLink,d=r.useState("node"),l=d[0],u=d[1],c=r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",fill:"currentColor",class:"bi bi-box-arrow-up-right",viewBox:"0 0 16 16"},r.createElement("path",{"fill-rule":"evenodd",d:"M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"}),r.createElement("path",{"fill-rule":"evenodd",d:"M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"}));return(0,r.useEffect)((function(){var e=localStorage.getItem("lang"),i=e||"node";"node"!==i||t||(i="rust"),"rust"!==i||n||(i="node"),u(i)})),r.createElement("div",null,r.createElement("div",{className:(0,i.Z)("langSelector")},t&&r.createElement("button",{className:(0,i.Z)("button","languageButton","mr-sm",{activeButton:"node"===l,inactiveButton:"node"!==l}),onClick:function(){localStorage.setItem("lang","node"),u("node")}},"Node.js"),n&&r.createElement("button",{className:(0,i.Z)("button","languageButton",{activeButton:"rust"==l,inactiveButton:"rust"!==l}),onClick:function(){localStorage.setItem("lang","rust"),u("rust")}},"Rust")),r.createElement("div",{className:(0,i.Z)("codeSnippetContainer")},"node"===l?r.createElement(r.Fragment,null,r.createElement("iframe",{frameborder:"0",width:"100%",height:"700px",src:t})):r.createElement("div",{className:(0,i.Z)("rustContainer")},r.createElement(o.Z,{className:(0,i.Z)("noMarginBottom"),language:"rust"},n))),r.createElement("div",{className:(0,i.Z)("githubLink")},a&&"node"===l&&r.createElement("a",{href:a,target:"_blank"},"GitHub\xa0",c),s&&"rust"===l&&r.createElement("a",{href:s,target:"_blank"},"GitHub\xa0",c)))}}}]);