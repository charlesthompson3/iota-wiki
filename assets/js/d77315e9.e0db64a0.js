"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[52772],{70300:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return p},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return h}});var i=n(83117),a=n(80102),r=(n(67294),n(3905)),s=n(46624),l=["components"],d={title:"Create a Verifiable Credential",sidebar_label:"Create and Sign",description:"Explain how a VC is created and verified",image:"/img/Identity_icon.png",keywords:["verifiable","credentials","Create","sign"]},o=void 0,c={unversionedId:"verifiable_credentials/create",id:"verifiable_credentials/create",title:"Create a Verifiable Credential",description:"Explain how a VC is created and verified",source:"@site/external/identity.rs/documentation/docs/verifiable_credentials/create.mdx",sourceDirName:"verifiable_credentials",slug:"/verifiable_credentials/create",permalink:"/identity.rs/verifiable_credentials/create",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/external/identity.rs/documentation/docs/verifiable_credentials/create.mdx",tags:[],version:"current",frontMatter:{title:"Create a Verifiable Credential",sidebar_label:"Create and Sign",description:"Explain how a VC is created and verified",image:"/img/Identity_icon.png",keywords:["verifiable","credentials","Create","sign"]},sidebar:"docs",previous:{title:"Overview",permalink:"/identity.rs/verifiable_credentials/overview"},next:{title:"Revocation",permalink:"/identity.rs/verifiable_credentials/revoke"}},u={},h=[{value:"Example",id:"example",level:2}],m={toc:h};function p(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"TODO: Explain how a VC is created and verified."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"This example shows how you can create a Verifiable Credential and validate it. In this example, Alice takes the role of the subject, while we also have an issuer.\nThe issuer signs a UniversityDegreeCredential type verifiable credential with Alice's name and DID.\nThis Verifiable Credential can be verified by anyone, allowing Alice to take control of it and share it with anyone."),(0,r.kt)(s.Z,{nodeReplitLink:"https://repl.it/@IOTAFoundation/create-vc?lite=true",rustContent:'// Copyright 2020-2022 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! A basic example that generates and publishes subject and issuer DID\n//! Documents, then creates a Verifiable Credential (vc) specifying claims about the\n//! subject, and retrieves information through the CredentialValidator API.\n//!\n//! cargo run --example account_create_vc\n\nuse identity::account::Account;\nuse identity::account::AccountBuilder;\nuse identity::account::IdentitySetup;\nuse identity::account::MethodContent;\nuse identity::account::Result;\n\nuse identity::core::json;\nuse identity::core::FromJson;\nuse identity::core::ToJson;\nuse identity::core::Url;\nuse identity::credential::Credential;\nuse identity::credential::CredentialBuilder;\nuse identity::credential::Subject;\nuse identity::crypto::ProofOptions;\nuse identity::did::DID;\nuse identity::iota::CredentialValidationOptions;\nuse identity::iota::CredentialValidator;\nuse identity::iota::FailFast;\n\npub async fn create_vc() -> Result<String> {\n  // Create an account builder with in-memory storage for simplicity.\n  // See `create_did` example to configure Stronghold storage.\n  let mut builder: AccountBuilder = Account::builder();\n\n  // Create an identity for the issuer.\n  let mut issuer: Account = builder.create_identity(IdentitySetup::default()).await?;\n\n  // Add verification method to the issuer.\n  issuer\n    .update_identity()\n    .create_method()\n    .content(MethodContent::GenerateEd25519)\n    .fragment("issuerKey")\n    .apply()\n    .await?;\n\n  // Create an identity for the holder, in this case also the subject.\n  let alice: Account = builder.create_identity(IdentitySetup::default()).await?;\n\n  // Create a credential subject indicating the degree earned by Alice.\n  let subject: Subject = Subject::from_json_value(json!({\n    "id": alice.document().id(),\n    "name": "Alice",\n    "degree": {\n      "type": "BachelorDegree",\n      "name": "Bachelor of Science and Arts",\n    },\n    "GPA": "4.0",\n  }))?;\n\n  // Build credential using subject above and issuer.\n  let mut credential: Credential = CredentialBuilder::default()\n    .id(Url::parse("https://example.edu/credentials/3732")?)\n    .issuer(Url::parse(issuer.did().as_str())?)\n    .type_("UniversityDegreeCredential")\n    .subject(subject)\n    .build()?;\n\n  // Sign the Credential with the issuer\'s verification method.\n  issuer\n    .sign("#issuerKey", &mut credential, ProofOptions::default())\n    .await?;\n\n  println!("Credential JSON > {:#}", credential);\n\n  // Before sending this credential to the holder the issuer wants to validate that some properties\n  // of the credential satisfy their expectations.\n\n  // Validate the credential\'s signature using the issuer\'s DID Document, the credential\'s semantic structure,\n  // that the issuance date is not in the future and that the expiration date is not in the past:\n  CredentialValidator::validate(\n    &credential,\n    &issuer.document(),\n    &CredentialValidationOptions::default(),\n    FailFast::FirstError,\n  )\n  .unwrap();\n\n  println!("VC successfully validated");\n\n  // The issuer is now sure that the credential they are about to issue satisfies their expectations.\n  // The credential is then serialized to JSON and transmitted to the subject in a secure manner.\n  // Note that the credential is NOT published to the IOTA Tangle. It is sent and stored off-chain.\n  let credential_json: String = credential.to_json()?;\n\n  Ok(credential_json)\n}\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n  // Obtain a JSON representation of a credential issued to us\n  let _credential_json: String = create_vc().await?;\n  Ok(())\n}\n',nodeGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/bindings/wasm/examples-account/src/create_vc.ts",rustGithubLink:"https://github.com/iotaledger/identity.rs/blob/dev/examples/account/create_vc.rs",mdxType:"CodeSnippet"}))}p.isMDXComponent=!0},46624:function(e,t,n){n.d(t,{Z:function(){return s}});var i=n(86010),a=n(67294),r=n(55990);function s(e){var t=e.nodeReplitLink,n=e.rustContent,s=e.nodeGithubLink,l=e.rustGithubLink,d=a.useState("node"),o=d[0],c=d[1],u=a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"12",fill:"currentColor",class:"bi bi-box-arrow-up-right",viewBox:"0 0 16 16"},a.createElement("path",{"fill-rule":"evenodd",d:"M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"}),a.createElement("path",{"fill-rule":"evenodd",d:"M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"}));return(0,a.useEffect)((function(){var e=localStorage.getItem("lang"),i=e||"node";"node"!==i||t||(i="rust"),"rust"!==i||n||(i="node"),c(i)})),a.createElement("div",null,a.createElement("div",{className:(0,i.Z)("langSelector")},t&&a.createElement("button",{className:(0,i.Z)("button","languageButton","mr-sm",{activeButton:"node"===o,inactiveButton:"node"!==o}),onClick:function(){localStorage.setItem("lang","node"),c("node")}},"Node.js"),n&&a.createElement("button",{className:(0,i.Z)("button","languageButton",{activeButton:"rust"==o,inactiveButton:"rust"!==o}),onClick:function(){localStorage.setItem("lang","rust"),c("rust")}},"Rust")),a.createElement("div",{className:(0,i.Z)("codeSnippetContainer")},"node"===o?a.createElement(a.Fragment,null,a.createElement("iframe",{frameborder:"0",width:"100%",height:"700px",src:t})):a.createElement("div",{className:(0,i.Z)("rustContainer")},a.createElement(r.Z,{className:(0,i.Z)("noMarginBottom"),language:"rust"},n))),a.createElement("div",{className:(0,i.Z)("githubLink")},s&&"node"===o&&a.createElement("a",{href:s,target:"_blank"},"GitHub\xa0",u),l&&"rust"===o&&a.createElement("a",{href:l,target:"_blank"},"GitHub\xa0",u)))}}}]);